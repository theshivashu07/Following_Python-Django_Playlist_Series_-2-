

All Updates, like in every lectures what we are adding.
We follow youtube's playlist : https://www.youtube.com/watch?v=C1NgOmoOszc&list=PLjVLYmrlmjGcyt3m6rt21nfjhYSWP_Ue_&index=1



===================================================================================================

Update 0 :
Video Lecture - 1 to 4. 
1 - Introduction to Django and Framework. 
2 - Before learning Django, what should come? 
3 - What is MVT, Model View Template. 
4 - Python, PIP and Django Installation. 



===================================================================================================

Update 1 :
Video Lecture - 5 and 6. 
5 - How to create new project on Django. 
First we want to open CMD, and go on the exect location where we want to create project.
Two ways to open location:
(1) Direct go on location in folder, and write "CMD ....." on front of these location.
(2) Go on search, write cmd and after select CMD entered. And after open you change your location where you want to create project:
    |>> C:\windows\system32> d:
    |>> D:\> cd .....
    |>> D:\.....>

Many processes under django, so to check it with the command:
|.....> django-admin

Here is many options, in which startproject is there,with it we create a project. 
|.....> django-admin startproject myProject



6 - How to Run Development Server in Django.
Now to do anything on your project, first make sure that you are under your main project or not?!! Because project's main manage.py file who control everything its under this project, so first you visit under project.
And also make sure that you not go under the same project name app. only go one step under. So to do it follow the steps:
|.....> cd myProject
Now we do run our project with the command:
|.....> python manage.py runserver  (Here we get 127.0.0.1:8000, here 8000 is bydefault) 
And then you just copy IP, and paste on chrome. And after that if nothing is show means we do something else, but if run perfectly means things are we do perfectly. And after that if you want to quit server's run, so you go on CMD and press "ctrl+c", then you server is stopped.
Or we also change our IP's, because sometime we want to work in another project at same time. 
|.....> python manage.py runserver 3108  (Here we get 127.0.0.1:3108, here 3108 is myway) 



7 - SetUp the Visual Studio Code Editor. 



===================================================================================================


8 - Folder's Structure:
Means where is our media's, static's, template's or html file's existing, these things we dicussed here...
So always remember two ways to make projects, first way we see in Internship time, and second is there...
And these folders we make under the projects section, not under the app. So here we make these three folders! 
media - Dynamic Files, means files which we use dynamically, like product images or data files and etcs. 
static - Media files statically, like javascript jquery images css fonts etc's. 
templates - All HTML files. 
And must is to make views.py file under the apps, not in project. 

And Under the same project's name app, there is a file settings.py, this file manage our database and some more things. Actually all the settings related things we manage here, because manage.py file also considering there's settings. 


===================================================================================================


9 - How to Migrate Default Migeations
Actually some table's schema django have bydefault, so when we do apply makemigrations and then migrate it, so there is some schema applying automatically. And it gives us the admin pannel bydefault, like you go on browser and run with "127.0.0.1:8000/admin" so your admin pannel is open automatically. But it wants username and password, because we generate it by terminal, and this work we do after do migrate things, because without its we never get schema. 
Actually before do apply these commands there is manage.py's space is 0'kb and after do this size is incresses, because then schema is coming there...
So first command is:
|.....> python manage.py makemigrations
Generally we use it, whenever we create new model, so we convert it into migrations first, but if you create first time, then we apply second command, is:
|.....> python manage.py migrate
So you see that there is manage.py play role as manager, who manageing all the tasks. 

Here we also apply other databse like MongoDB or SQL or others, but Django use sqlite database, as bydefault. But its only for simple CRUD things, be in future in big projects we never work with these...
And when you want to use other database so you change the setting on setting.py file under the same name app, so there is a dictionary of DATABASES, these we do changes in future, not now.

So here we know how to do apply migrations, because without it we never able to create superuser, and if not create superuser then never open admin section, so thats the reason why we do migrations. 




10 - Install DB Browser
Actually whatever data we inserted in our SQLite database, we can't able to view this data, because it's a binary data. So we install DB browser, so that we viewing these data as rows and columns format.



===================================================================================================




11 - How to create SuperUser in Django 

Command to create superuser is :
|.....> python manage.py createsuperuser
After that there ask some information like name email username password and some others things. And then your superuser is created. And then you are free to login on admin pannel. 
But before we open admin pannel, first we open DBBrowser and check there, where our this user's entry registered. So open it and select database file, and then you see on Tables's auth_user and click its right and browse table option and there is show all user's login details. Here all details shown but it incript all passwords. 

So this is the way that how to we create superuser, and view as admin, because in future when we create many models in future, so there we add products and otherthings in admin sides, so that all the things shown as user side. Actually two types sides of every websites, first is what user are heppens, and what is a front of user. So admin sides things we dicussed after some lectures, because in some more lectures we discussed the things about, what user show...



===================================================================================================



12 - What are URL's & Views in Django. 

URL's or Routes:
We also say URL's as Route. Like our domain name is shivashu.com so this is domain, but routing play role as suppose we click this website's aboutus page, so what will heppens in url, so it is "www.shivashu.com/aboutus", so this routing or slug will create in url.
Show starting page : https://www.shivashu.com/
Show list of all posts : https://www.shivashu.com/blog/
Show specify posts : https://www.shivashu.com/blog/singleposts
We see in future like if we want to pass parameter, pass id, or do how to we make urls dynamically, so how to we do that?! see in future. 

Views:
The logic is executed for different URL's(https method)
(1) Functions
(2) Class
Prapare and return response data(eg. HTML)
Every view is connected with your url, which url's you call, same name view's function or class will calling always, and for every request our view return the things as response. And that's how these both links are connected with each others. 

Now suppose you want to change superuser's url...
by default --> localhost:8000/admin/
localhost:8000/admin/login/?next=/admin/ (hitting and converting bydefault)
http://127.0.0.1:8000/admin/login/?next=/admin/  [http://127.0.0.1:8000/admin/]

So if you want to change, so you go on project's personal app and open url.py and there you change the url patterns bydefault url and set path "admin/" to "admin-panel/", Now if you go and again refresh this previous page, so there is show error, as not found error. Reason is because you're changed its route or root. 
Now URL is --> localhost:8000/admin-panel/
localhost:8000/admin-panel/login/?next=/admin-panel/ (hitting and converting bydefault)
http://127.0.0.1:8000/admin-panel/login/?next=/admin-panel/  [http://127.0.0.1:8000/admin-panel/] 


===================================================================================================

 
13 - How to create your own URL's and Views in Django. 

First you make sure that in same project's name app you create views.py file. And written a code there:
from django.http import HttpResponse 
def aboutus(request):
        return HttpResponse("<b>Welcome to shivashu.com</b>")
def course(request):
        return HttpResponse("Welcome to Python")
This HttpResponse return a response as string formate only. To return any html page we use other things which we discuss later. 
And there is we want to pass "request" as parameter, now there is its no use, but when we pass any parameter in future, so all the passing data coming on this parameter, and you also change its name, but you prafer its because this is a bydefault name.

Now we want that if we write "localhost:8000/aboutus/" so this function's data show there. So first we go on urls.py file and make url for aboutus as link, so its creation code is:

........................
from myProject import views
urlpatterns = [
        ..........................
        path('about-us/',views.aboutus),
        path('course/',views.course),
]

So here first we import views.py file there, and in urlpattern under path first we set url, and then write that if this url will call then views.py's which function will called. 
And we also use html tag's there with your string data, like you write data under bold tag, so that your HttpResponse is going as bold string. 


===================================================================================================



14 - How to Create a Dynamic URL in Django. 

Actually dynamic routes means you see some websites like any website where we visit, so website is www.shivashu.com. Then you want to open all people's blog section so after open blog section you see that route or url is now www.shivashu.com/blogs. Now because many blog are there, so you open any one like: "ashu-blog" so immidiate your url is now "www.shivashu.com/blogs/ashu-blog", so means is if there is 1000 of blogs, and you want to open any other blog, like "yash-blog" so for every blogs url is different but like "www.shivashu.com/blogs/ashu-blog/yash-blog", its original url is "www.shivashu.com/blogs/ashu-blog/yash-blog" now.
So thats the thing what we trying to say that, for blogs section, we have the dynamic url, who help us to see all blogs one by one so there "www.shivashu.com/blogs/......." is always same or fix for all 1000 blogs, and only last name is change always, according to you open blog. So thats the over means or work of dynamic url's. 
By the way i share you the same thing which we learn in internship time, there we manage same thing using to create many different-different apps. Like for managing all blogs we make one blog app, and all the things we manage there.

So lets now we implement it prectically, Suppose in our project we have three courses, like java python django. So on which course we click, its page is open, and all the urls changes automatically, and all its we managing using dynamic routes. so lets see these...

But before starting i describe that, routs are always create on the bases of int, str or slugs. Here int means all numbers, string means every string, and slug means the data which is saperated by dash(-) sign, like "shivam-kumar-shukla". But if you selected int then if you pass string in url, then error is coming there, and

urls.py
.......................
urlpatterns = [
    ..................
    # path('course/<int:courseid>',views.courseDetails),
    # path('course/<str:courseid>',views.courseDetails),
    # path('course/<slug:courseid>',views.courseDetails),
    path('course/<courseid>',views.courseDetails),
]

views.py
.................
def courseDetails(request,courseid):
    return HttpResponse(courseid)

Chrome:
Note: So if we are select as int:
localhost:8000/course/1 --> printing 1. 
localhost:8000/course/9 --> printing 9. 
localhost:8000/course/s --> Error. 
Note: So if we are select as str and slugs:
localhost:8000/course/s --> printing s. 
localhost:8000/course/vashu --> printing vashu. 
localhost:8000/course/1 --> printing 1. 
localhost:8000/course/abc-def --> printing abc-def. 

So actually these things we using in future, because you see that, there "localhost:8000/course/" is a prefix, and its always same but after that whatever we want to pass, it show directly. But in future when we works dynamically with using templates, so there we want these, now here you just see that how to things are works there.
And yes if you write format-int, so only in this case string and slugs are not allowed, but in format-str or format-slug all things are accepting. 
Actually you use this as conditions also, but suppose you don't know that which type of value is coming, so you also not written any type there. 

So thats the overall things there, that how to you manage all the things by dynamic url change patterns. So with this logic we shown multiple posts, products, blogs, items and more things there. 



===================================================================================================



15 - Render an HTML Template as Response

Now we see in precctical that how we render html template as response...
So to do it we import one library from django.shorcut import rander. Till now we only return text as response, but now we are ready to learn that how we render templates on any views. 

So first make sure that there is exist templates folder under the project. So you make one file there like index.html file. And do simple code there:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home Page</title>
</head>
<body>
    <b> Welcome to shivashu.com!</b>
</body>
</html>
Actually this code is only to get the idea that how to we render any webpage or html page. 

So second step is you go same projects name app, and open settings.py file, and on its templates section we want to tell this setting.py file that where is our location of all html files collection. So on template's 'DIRS' section we set path on list to connect. like:
'DIRS' : [BASE_DIR,"templates"],
Here we write 'BASE_DIR', which means its gives us the path till the folders location, and after that we write our folder name, because template folder is in front. Maybe you know internship time, where we make many apps so there is we write many more things saperated by slash(/) sign. But here things are simple.

So now our third task is we open views.py file, and create function for homepage, and now there we not return any HttpResponse, here we render template.
views.py
....................................
from django.shortcut import render
def homepage(request):
    return render(request,"index.html")
....................................

Here under render, two parameter passing is mandetory, first is 'request' and second is that html file which we render as response. 
Now the third task is must to make url for this, so open urls.py file and make url there. 
urls.py
...............................
urlpatterns = [
    path('',views.homepage),
    ...............
]

So actually here we are not pass any name as url, because we want this page as bydefault page, means whenever you open as "www.shivashu.com", so your this page is open bydefault, so this blank path is hitting on bydefault. This blank path is like a site url now.
So now you go on browser and refresh, you see that your html file is rendered succesfully as response. 


Now we are see that if we want to implement css then how the things are heppens, so to just only show we implement some code more in our code file, and then save it, and again refresh the main page, and you see that these css part, which is available under style tag, its reflecting its show. 

So basically render and HttpResponse are return response, but both have different expresive powers, render return html files and HttpResponse return only text strings. 



===================================================================================================



16 - Passing Data From a Django View to a Template

Now we see that, which last html page we make, so on it how to we pass data on it thrue view.py file. Means we will see the connectivity that how to html files take all data from django's database. 

So suppose the situation is, your html file's title is "Home Page", and you print the data in html file is: "Welcome to shivashu.com!". So we want to take both data by views.py file's function. So to do these things we use dictionary, and there we store the data as key-values paires. And we also change things in index.html file. Actually nothing we do a big change there, we just in the string's places, we simply written its holding keys only. And to know more information you  simply see this file.
views.py
................
def homepage(request):
    data={
        'title' : 'Home Page',
        'message' : 'Welcome to shivashu.com!',
        'mylist' : ['shivam','vashu','shivashu','shrivashu'],
    }
    return render(request,'index.html',data);
...............
And always remember that we only pass this data variable, but we not uses thi data name, we access this dictionary's data with the help of its keys only. And if you want to print any key's data so we use dual curly breackets. like:{{title}}.

So now there we only see that how to we passing data from a django view to a template, but in a next lecture we show how to we use for loops, because if in this situation we trying to print as {{mylist}}, so it print all data same as it is, as list. But we don't want it to print alls like that, and thats why we use loops. but in next lectures.



===================================================================================================



17 - How to use the Django Template For Loop

Now we will learn that how to we print django's views.py file's data into a html page one by one using loops or iterations. so first we set some data on our views.py file. 
views.py
def homepage(request):
    data={
        'title' : 'Home Page',
        'message' : 'Welcome to shivashu.com!',
        'mylist' : ['shivam','vashu','shivashu','shrivashu'],
        'student_details' : [
            {'name':'shivam','phone':7898000000},
            {'name':'shivam','phone':7898111111},
        ]
    }
    return render(request,'index.html',data);

and now we implementing for loop under body section, to see exect code you prefer index.html file directly, because here we see overview only...
index.html
...............
<body>
    {% for n in mylist %}
    <div>{{n}}</div>
    {% endfor %}
</body>
..............

Django Template For Loop:
Variable                         Description
forloop.counter             The current iteration of the loop(1-indexed). 
forloop.counter0           The current iteration of the loop(0-indexed). 
forloop.revcounter        The number of iteration from the end of the loop(1-indexed). 
forloop.revcounter0      The number of iteration from the end of the loop(0-indexed). 
forloop.first                   True if this is the first time through the loop. 
forloop.last                    True if this is the last time through the loop. 

So after that we are printing our dictionaries data, actually we printing data as table format. But printing the dictionary data is different from other printings, like list tuple sets or normal variables. So thats all about the how to we implement loops.



===================================================================================================



18 - If Else Statement in Django Template

So to see this implementation in precticals, we make one more list data in views's function. And then we make login in index.html file, you just go this file and see this implementations, that how things are happens. 
So actually first we implement the logic where we check that all 20's greater values printing there, and in second if-else statement we make condition that if list not have any data then show a massage, otherwise all greater then 20 data printing there.

index.html(using if)
...................
<body>
    ...................
    {% for n in mylist %}
        {% if n > 20 %}
            <div>{{n}}</div>
        {% endif %}
    {% endfor %}
</body>
...................

index.html(using if-else)
...................
<body>
    {% if mydatacopy|length > 0 %}
        {% for n in mydatacopy %}
            {% if n > 20 %}
                <div>>> {{n}}</div>
            {% endif %}
        {% endfor %}
    {% else %}
        <div>No Data Found.</div>
    {% endif %}
</body>
...................

So now we know everything about how to we send data from views section to html file, and how to iterate list, tuple, sets and also dictionary data. And we also apply if and if-else using loops. 



===================================================================================================



19 - How to use CSS, JavaScript & Images in Django? 

Actully some things you shifting back before starting this lecture, like in views section we do code beacuse of passing many values, so you just clear all the extra code, and make it again as simple and clean, same as lecture-15. 
views.py
def homepage(request):
    return render(request,"index.html")
............................


So here now first step is that you go on browser and download any precreated template. And after download, cut all html files from there and paste there on out project's template folder, and also cut all the static related files, like javascript jquery css images and alls, and then paste these on project's static folder. Now when you run it your index.html file is callable, but its images javascript jquary and css part is not doned its work perfectly, and its reason is because its not connected perfectly. 
Actually all files are on static folder, and in our html file's location is different, so first your task that you go on settings.py file and there you instruct about your location, and then we have a permission to do the tasks, so we are set directry's path in setting.py first. So do a extra code in the file's last...
STATICFILES_DIRS = [
    BASE_DIR,"static"
] 
So now all permissions are gurented now. And if you want to access any file by chrome, like : localhost:8000/static/css/clickers.css, so there is your file open perfectly. 
And because where's we copy that code, there our css javascript jquary files are available in front, so that we go in every html file and search every file's folders, and in every file's implementations place you add "static/" in prefix on its. So all the javascript jquary images css files are implemented in a code, so thats the things happen there.

But always remember thats the only first way to implement that, but there is a second way also and it is where not must to add "/static/" in prefix, here you just add {% load static %} in starting in your html file, and in every javascript jquary images css files implementation's places you write like: 
<................... hrep="{% static 'img/fav.png' %}" > 
And you implement this same code idea in each file's places, so in this way also we do implement static files, but first way is easy then second's way. So we follow first way in future but its for only rememberance that there is also second way to do implement the same logic. But in my index-2.0.html file runs perfactly, but size related issues coming there, but this code works perfect there.

And in the next lecture we implement the code that how to we generate routing or url linkings. But till now we see that, how to we download any template and implementing in our project, so all tvhe things you do by yourself, with follow same as this video. 




Here we again make html file, because of whech html code we indsert first this is a only one single page, so must to we download another code, where multiple files available. so now commit as "Lecture 19 2.0". 


===================================================================================================



20 - Common Header & Footer in Django HTML Template (Fix Header & Footer)

Actually we know that in our file our header & footer always same, so the idea is we make a two extra file and there common code we write who repeting in every line, so we saperating hedder and footer's code saperatly, and other files are join this code as chiled. So you just follow steps. Here we use "include" keyword who help us to join templates ones to others, so using this you add both files section to other file's code. And incude helps us to implement components or chiled's page code. 

So first you make a separate files, like we cut header in other saperate file, and footer in other saperate file. And then you include both file's in the top and bottom in other files where same code exist, so first you cut same code. just like this way:
index.html
{% include "HEADER.html" %}   // after cut same header code
// In this section our index file's real code exist. 
{% include "FOOTER.html" %}   // after cut same footer code

Now our code is again works perfectly, so here we use "include" keyword to do that. But in the next lecture we will talk about that way, like same we learn in internship time. Means how we do header and footer in the same html file, and then do use "extend" keyword, With the help of this we change midlle data content. 



===================================================================================================


21 - How to use the Extends and Include Django Template Tags 

We already know that "include" keyword helps us to include any other files code. But "extend" keywords use is totally different from "include" keyword. Actually with this helps, we replacing middle section's code from a file, like we do in SEPARATE.html. So there middle sections data extend always, according to the situation's or other html file's middle block codes. So with the logic of extend, you dont want to call header and footer's file in each and every time, these file are going on SEPARATE.html file, and include there. So how to we implement that lets see this: 

So things are simple here, that "include" provide us the feature that you include the any file's code on any another file. But "extend" provide a feature that you create header and footer saperately and extend the middle section's data according to situation. So that our code is less now and much more systomatic. 

SEPARATE-1.html
{% include "HEADER.html" %}
{% block blockname %}
{% endblock %}
{% include "FOOTER.html" %}

index.html and others
{% extends 'SEPARATE-1.html' %}
{% block blockname %}
// In this section our index file's real code exist. 
{% endblock %}

Now i'm starting to explain in the first. In the 'SEPARATE-1.html' file, we include the HEADER and FOOTER files, which means there exist your header and footers, but in its middle section we make a place for block with name, so that when we extend it in future in other html files, so on that file with extending we also gives its middle section code also.
And as we do there in the other files, so things are same, but always remember the name of bases, because here is must that we use unique name for base, because many times we use multiple bases, so that you always remember.  
And yess these 'include' and 'extends' are a django's tags. Actually here we use two type of ways we use, and its no change in actual code, first is we use include keyword to connect HEADER and FOOTER files, and in second we direct written code. So actually these thigs are same, no worry about that, i'm just to show that we also do thing in this way. So we make SEPARATE.html files separately here, and to check our second html file, you want to change extends file name in every file's top. 

Let's we do that with the help of SEPARATE-2.html file, because there is we not including HEADER and FOOTER file's data, because we direct write there whole code, so nothing a big change is this, but just to know that this way also we have, so we again rewrite and commit as "Lecture 21 2.0".
And don't think that you handle this file name dynamically, with value pass, because with all ways code is not working currectly, i don't know why maybe i don't know about this technique, but no dynamically done that is not possible:
{% extends '{{passdata}}' %}  |  data={'passdata' : "SEPARATE-1.html"}    : Wrong 
{% extends {{passdata}} %}  |  data={'passdata' : "'SEPARATE-1.html'"}    : Wrong 
{{passdata}}  |  data={'passdata' : "{% extends 'SEPARATE-1.html' %}"}    : Wrong 



===================================================================================================
























